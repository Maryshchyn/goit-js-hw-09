{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAG/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3BC,YAAW,WACaC,KAAKC,SAAW,GAIpCJ,EAAQ,uBAAwCK,OAAfR,EAAS,QAAYQ,OAANP,EAAM,OAGtDG,EAAO,sBAAqCI,OAAfR,EAAS,QAAYQ,OAANP,EAAM,OAGpDQ,cAAgB,IACfR,OApDM,CACXS,OAAQC,SAASC,cAAc,QAC/BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,OAAQJ,SAASC,cAAc,0BAG5BF,OAAOM,iBAAiB,UAAU,SAAAC,GACrCA,EAAEC,iBAQF,IAPA,IAAMC,EAAWF,EAAEG,OAAOD,SACpBE,EAAeF,EAASJ,OAAOO,MAC/BC,EAAcC,OAAOL,EAASlB,MAAMqB,OACpCG,EAAaD,OAAOL,EAASO,KAAKJ,OACpCK,EAAmB,EACnBC,EAAkB,EAEbC,EAAI,EAAGA,EAAIR,EAAcQ,GAAK,EAAE,CAGvC,GAFAD,GAAmB,EACnBD,EAAmBJ,EAAcE,EAAaI,GACV,IAAhCvB,KAAKwB,KAAKH,GACZ,OAAOI,EAAAlC,GAASmC,OAAOC,QAAQ,iCAGjClC,EAAc6B,EAAiBD,GAAkBO,MAAK,SAAAC,GACtDJ,EAAAlC,GAASmC,OAAOI,QAAQD,MAGzBE,OAAM,SAACC,GAENP,EAAAlC,GAASmC,OAAOC,QAAQK,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconst refs = {\n  onForm: document.querySelector('form'),\n  delayFirst: document.querySelector('input[name=\"delay\"]'),\n  stepDelay: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.onForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const elements = e.target.elements;\n  const amountValues = elements.amount.value;\n  const delayValues = Number(elements.delay.value);\n  const stepValues = Number(elements.step.value);\n  let delayStepCounter = 0;\n  let promisePosition = 0;\n\n  for (let i = 0; i < amountValues; i += 1){\n    promisePosition += 1;\n    delayStepCounter = delayValues + stepValues * i;\n    if (Math.sign(delayStepCounter) === -1) {\n      return Notiflix.Notify.failure('Do not enter a negative value');\n      \n    }\n    createPromise(promisePosition, delayStepCounter).then(sucsesMessage => {\n    Notiflix.Notify.success(sucsesMessage);\n    })\n    \n  .catch((rejectMessage) => {\n    \n    Notiflix.Notify.failure(rejectMessage);\n  });\n    \n  }\n});\n\nfunction createPromise(position, delay) {\n\n  \n  return new Promise((resolve, reject) => {\n    \n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        // Fulfill\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        // Reject\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n\n      }\n      promisCounter = 0;\n    }, delay);\n  })\n  \n  \n};\n\n\n\n\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","concat","promisCounter","onForm","document","querySelector","delayFirst","stepDelay","amount","addEventListener","e","preventDefault","elements","target","amountValues","value","delayValues","Number","stepValues","step","delayStepCounter","promisePosition","i","sign","$parcel$interopDefault","Notify","failure","then","sucsesMessage","success","catch","rejectMessage"],"version":3,"file":"03-promises.23ec6ed8.js.map"}